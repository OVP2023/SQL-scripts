--=============== МОДУЛЬ 5. РАБОТА С POSTGRESQL =======================================
--= ПОМНИТЕ, ЧТО НЕОБХОДИМО УСТАНОВИТЬ ВЕРНОЕ СОЕДИНЕНИЕ И ВЫБРАТЬ СХЕМУ PUBLIC===========
SET search_path TO public;

--======== ОСНОВНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--Сделайте запрос к таблице payment и с помощью оконных функций добавьте вычисляемые колонки согласно условиям:
--p1_1 Пронумеруйте все платежи от 1 до N по дате платежа
--p1_2 Пронумеруйте платежи для каждого покупателя, сортировка платежей должна быть по дате платежа
--p1_3 Посчитайте нарастающим итогом сумму всех платежей для каждого покупателя, сортировка должна 
--быть сперва по дате платежа, а затем по размеру платежа от наименьшей к большей
--p1_4 Пронумеруйте платежи для каждого покупателя по размеру платежа от наибольшего к
--меньшему так, чтобы платежи с одинаковым значением имели одинаковое значение номера.
--Можно составить на каждый пункт отдельный SQL-запрос, а можно объединить все колонки в одном запросе.

select payment_id as "Платеж", payment_date::date as "Дата платежа", 
row_number() over(order by payment_date) as p1_1
from payment 


select payment_date::date as "Дата платежа", customer_id as "Покупатель", amount as "Размер платежа",
row_number() over(partition by customer_id order by payment_date) as p1_2
from payment 

select payment_id as "Платеж", payment_date::date  as "Дата платежа", customer_id as "Покупатель", amount as "Размер платежа",
sum(amount) over(partition by customer_id order by  payment_date::date,amount) as p1_3
from payment

select payment_id as "Платеж", payment_date::date as "Дата платежа", customer_id as "Покупатель", amount as "Размер платежа",
rank() over(partition by customer_id order by amount desc) as p1_4
from payment 



--ЗАДАНИЕ №2
--С помощью оконной функции выведите для каждого покупателя стоимость платежа и стоимость 
--платежа из предыдущей строки со значением по умолчанию 0.0 с сортировкой по дате платежа.

select payment_date::date as "Дата платежа", customer_id as "Покупатель", amount as "Стоимость платежа",
lag(amount,1,0.0) over(partition by customer_id order by payment_date) as "Предыдущая стоимость платежа"
from payment 



--ЗАДАНИЕ №3
--С помощью оконной функции определите, на сколько каждый следующий платеж покупателя больше или меньше текущего.

select payment_date::date as "Дата платежа", customer_id as "Покупатель", amount as "Стоимость платежа",
(lead(amount)over(partition by customer_id order by payment_date)-amount) as "Разность след. и текущ. платежей"
from payment 




--ЗАДАНИЕ №4
--С помощью оконной функции для каждого покупателя выведите данные о его последней оплате аренды.
select *
from (select customer_id, payment_id, payment_date, amount,
     row_number() over (partition by customer_id order by payment_date desc)
     from payment ) as p
where row_number = 1

 




--======== ДОПОЛНИТЕЛЬНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--С помощью оконной функции выведите для каждого сотрудника сумму продаж за август 2005 года 
--с нарастающим итогом по каждому сотруднику и по каждой дате продажи (без учёта времени) 
--с сортировкой по дате.




--ЗАДАНИЕ №2
--20 августа 2005 года в магазинах проходила акция: покупатель каждого сотого платежа получал
--дополнительную скидку на следующую аренду. С помощью оконной функции выведите всех покупателей,
--которые в день проведения акции получили скидку




--ЗАДАНИЕ №3
--Для каждой страны определите и выведите одним SQL-запросом покупателей, которые попадают под условия:
-- 1. покупатель, арендовавший наибольшее количество фильмов
-- 2. покупатель, арендовавший фильмов на самую большую сумму
-- 3. покупатель, который последним арендовал фильм






